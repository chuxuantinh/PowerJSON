<?xml version="1.0" encoding="utf-8"?>
<topic id="cdb88b9f-5c60-4e72-8a96-009906d6d990" revisionNumber="1">
	<developerConceptualDocument
	  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
	  xmlns:xlink="http://www.w3.org/1999/xlink">

		<!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

		<introduction>
			<!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
			<autoOutline />

			<para>
				In the last chapter, we introduced the basic of JSON serialization and deserialization with the <codeEntityReference>T:fastJSON.JSON</codeEntityReference> class, and tweaking the result of serialization with settings in <codeEntityReference>T:fastJSON.JSONParameters</codeEntityReference> . In this chapter, we will discuss further on controlling the serialization result with <newTerm>PowerJSON</newTerm>.
			</para>
		</introduction>

		<!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
		<section address="SampleClass">
			<title>A Sample Class</title>
			<content>
				<!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
				<para>The most common issues of JSON serialization is to control the naming of JSON structures and the visibility of serialized fields.</para>
				<para>Given that we have a class like the following:</para>
				<code language="c#" source="..\MsUnitTest\SerializationControlTests.cs" region="Demo Class" />
				<code language="c#" source="..\MsUnitTest\SerializationControlTests.cs" region="Misc Types" />
				<para>And we want to fulfill the following requirements:</para>
				<list class="bullet">
					<listItem>
						<para>
							<codeInline>DemoClass</codeInline> is an <languageKeyword>internal class</languageKeyword>, which, by default, is NOT serializable for its constructor is not publicly visible, but we want to make it deserializable here.
						</para>
					</listItem>
					<listItem>
						<para>All properties should have camel-case serialized names.</para>
					</listItem>
					<listItem>
						<para>The private field <codeInline>privateField</codeInline> should be serialized to the name "field".
						</para>
					</listItem>
					<listItem>
						<para>
							<codeInline>MyProperty</codeInline> should be serialized to the name "prop".
						</para>
					</listItem>
					<listItem>
						<para>
							<codeInline>MyEnumProperty</codeInline> is serialized to have a name "enum".
						</para>
					</listItem>
					<listItem>
						<para>
							<codeInline>Number</codeInline> should not be serialized if its value is 0.
						</para>
					</listItem>
					<listItem>
						<para>
							<codeInline>Identifier</codeInline> could be of type <codeInline>ClassA</codeInline> or <codeInline>ClassB</codeInline>, and have a serialized name as "a" or "b", respectively. If <codeInline>Identifier</codeInline> is not of the above two types, its serialized name should be "variant".
						</para>
					</listItem>
					<listItem>
						<para>
							<codeInline>InternalValue</codeInline> should not be serialized or deserialized.
						</para>
					</listItem>
					<listItem>
						<para>
							The name of the <codeInline>Vip</codeInline> field in <codeInline>MyEnum</codeInline> type should be serialized as "VIP".
						</para>
					</listItem>
				</list>
				<para>The above requirements could not be fulfilled with fastJSON, but with PowerJSON, it is possible. There are two ways to achieve the serialization control.</para>
				<list class="ordered">
					<listItem>
						<para>
							<newTerm>Invasive Mode</newTerm>: Declaratively add Custom Attributes to the data model, i.e., <codeInline>DemoClass</codeInline> here, to control the serialization result.
						</para>
					</listItem>
					<listItem>
						<para>
							<newTerm>Noninvasive Mode</newTerm>: Leave the data model alone. Programmatically control the serialization result.
						</para>
					</listItem>
				</list>
			</content>
		</section>
		<section address="CustomAttributes">
			<title>Invasive Mode: Controlling Serialization with Custom Attributes</title>
			<content>
				<para>
					The invasive mode of serialization control adds <newTerm>custom attributes</newTerm> to the <languageKeyword>class</languageKeyword>es or <languageKeyword>struct</languageKeyword>s we want to take control.
				</para>
				<para>
					Since this approach touches the source code, it is called <newTerm>Invasive Mode</newTerm>.
				</para>
				<para>The following code shows how to use custom attributes to control the serialization result.</para>
				<code language="c#" source="..\MsUnitTest\SerializationControlTests.cs" region="Annotated Demo Class" />
				<para>After annotating the data model with custom attributes, we can serialize it.</para>
				<para>Firstly, setup the default serialization settings to fulfill this requirement--all properties should have camel-case serialized names.</para>
				<code language="c#" source="..\MsUnitTest\SerializationControlTests.cs" region="Bootstrap"/>
				<para>Secondly, initialize the data model with some values.</para>
				<code language="c#" source="..\MsUnitTest\SerializationControlTests.cs" region="Initialization"/>
				<para>Finally, call the <codeEntityReference>M:fastJSON.JSON.ToJSON(System.Object)</codeEntityReference> method to get the serialization result.</para>
				<code language="c#" source="..\MsUnitTest\SerializationControlTests.cs" region="Print Result"/>
				<para>The above example gives the following result.</para>
				<code language="javascript"><![CDATA[{"prop":"p","enum":"VIP","number":1,"a":{"name":"c"},"field":1}]]></code>
				<para>To deserialize the JSON string back to an instance of <codeInline>DemoClass</codeInline>, use the <codeEntityReference>M:fastJSON.JSON.ToObject``1(System.String)</codeEntityReference> method.</para>
				<code language="c#"><![CDATA[var o = JSON.ToObject<Demo1.DemoClass> (s);]]></code>
				<para>The basic custom attributes used in this example are listed below.</para>
				<list class="bullet">
					<listItem>
						<para>
							<codeEntityReference>T:fastJSON.JsonSerializableAttribute</codeEntityReference> - Marks a non-public <codeInline>class</codeInline> or <codeInline>struct</codeInline> is deserializable; turns a non-public <codeInline>field</codeInline> or <codeInline>property</codeInline> visible to serialization and deserialization.
						</para>
					</listItem>
					<listItem>
						<para>
							<codeEntityReference>T:fastJSON.JsonIncludeAttribute</codeEntityReference> - Specifically denotes whether a <codeInline>field</codeInline> or a <codeInline>property</codeInline> is serializable.
						</para>
					</listItem>
					<listItem>
						<para>
							<codeEntityReference>T:fastJSON.JsonFieldAttribute</codeEntityReference> - Controls how a <codeInline>field</codeInline> or a <codeInline>property</codeInline> is serialized or deserialized. Serialized name (AKA, JSON alias, or renaming) and polymorphic types can be assigned by this attribute.
						</para>
					</listItem>
					<listItem>
						<para>
							<codeEntityReference>T:fastJSON.JsonEnumValueAttribute</codeEntityReference> - Renames serialized <codeInline>enum</codeInline> values (also decodes them in deserialization).
						</para>
					</listItem>
				</list>
				<para>Some system built-in attributes are also supported.</para>
				<list class="bullet">
					<listItem>
						<para>
							<codeEntityReference qualifyHint="true">T:System.ComponentModel.ReadOnlyAttribute</codeEntityReference> - Marks a <codeInline>field</codeInline> or a <codeInline>property</codeInline> is read-only, thus excluding it from deserialization.
						</para>
					</listItem>
					<listItem>
						<para>
							<codeEntityReference qualifyHint="true">T:System.ComponentModel.DefaultValueAttribute</codeEntityReference> - Hides a <codeInline>field</codeInline> or a <codeInline>property</codeInline> when its value equals the value in the attribute.
						</para>
					</listItem>
				</list>
			</content>
		</section>
		<section address="NoninvasiveControl">
			<title>Noninvasive Mode: Controlling Serialization with SerializationManager</title>
			<content>
				<para>The invasive mode is quite simple--simply marking the classes and members with custom attributes and things are done. However, there are some disadvantages of custom attributes. Some of them are listed below.</para>
				<list class="bullet">
					<listItem>
						<para>Issue 1: Custom attributes require modifications on source code, but sometimes it is impossible, e.g. we can't modify the CLR types in the .NET Framework.</para>
					</listItem>
					<listItem>
						<para>
							Issue 2: They invade the data models and make them rely on the <newTerm>PowerJSON</newTerm> library.
						</para>
					</listItem>
					<listItem>
						<para>Issue 3: They may conflict, typically when the same data model is required to be serialized to various forms.</para>
					</listItem>
				</list>
				<para>
					To surmount the above issues, PowerJSON has introduced a <newTerm>Noninvasive Mode</newTerm> of serialization control. The noninvasive mode makes no modification on the data models, yet provides no less power than the invasive mode.
				</para>
				<para>
					The noninvasive mode can be accessed with the following classes: <codeEntityReference>T:fastJSON.SerializationManager</codeEntityReference>, <codeEntityReference>T:fastJSON.TypeOverride</codeEntityReference> and <codeEntityReference>T:fastJSON.MemberOverride</codeEntityReference>.
				</para>
				<para>
					The default instance of <codeInline>SerializationManager</codeInline> can be accessed from the <codeInline>static</codeInline> <codeEntityReference>P:fastJSON.JSON.Manager</codeEntityReference> property in the <codeEntityReference>T:fastJSON.JSON</codeEntityReference> class. Calling its <codeEntityReference>M:fastJSON.SerializationManager.Override``1(fastJSON.TypeOverride)</codeEntityReference> method, which takes an instance of <codeInline>TypeOverride</codeInline>,  will tell the serialization engine how to alter the result of serialization or deserialization.
				</para>
				<para>
					The following code gives an example of <codeInline>SerializationManager</codeInline>.
				</para>
				<code source="..\MsUnitTest\SerializationControlTests.cs" region="Noninvasive Control Code" />
				<para>To serialize or deserialize the data model, use the same function call as the invasive mode to the <codeEntityReference>T:fastJSON.JSON</codeEntityReference> class. And the output will be the same as the invasive mode example.</para>
				<para>
					With the <codeInline>SerializationManager</codeInline>, serialization can be controlled from external code. Issue 1 and Issue 2 is resolved. To solve Issue 3, conflictive serializations, we will use an alternating <codeInline>SerializationManager</codeInline>, which is discussed below.
				</para>
			</content>
		</section>
		<section address="Alteration">
			<title>Alternating the SerializationManager</title>
			<content>
				<para>To demonstrate why custom attributes may conflict and how to resolve the conflict with the alternation of <codeInline>SerializationManager</codeInline>, let's take a look at the following classes first. </para>
				<code source="..\MsUnitTest\SerializationControlTests.cs" region="Alteration Demo Classes" />
				<para>
					The above code snippet has two classes. A <codeInline>Group</codeInline> class has a list containing multiple instances of <codeInline>Member</codeInline> class.
				</para>
				<para>
					A normal serialization of the <codeInline>Group</codeInline> class may look like this (white-spaces added for clarity):
				</para>
				<code language="javascript">
					<![CDATA[{"ID": 1,
"Name": "group name",
"Members": [
	{ "GroupID": 1, "Name": "a" },
	{ "GroupID": 1, "Name": "b" },
	{ "GroupID": 1, "Name": "c" }
]}]]>
				</code>
				<para>
					We can see that the <codeInline>"GroupID":1</codeInline> is repeated multiple times in each serialized <codeInline>Member</codeInline> instance. Since all members belong to the group 1, which is already represented in <codeInline>"ID": 1</codeInline> and implied by the cascading structure of the JSON result, those <codeInline>"GroupID": 1</codeInline> fields could be omitted for conciseness.
				</para>
				<para>So we may hope that: 1) The <codeInline>GroupID</codeInline> fields should be hidden when they are serialized within a <codeInline>Group</codeInline> instance to generate a compact result without redundancy. 2) The <codeInline>GroupID</codeInline> fields should be visible when they are individually serialized within the <codeInline>Member</codeInline> instance.</para>
				<code language="javascript">
					<![CDATA[
// the desired serialization result of a Group instance
{"ID": 1,
"Name": "group name",
"Members": [
	{ "Name": "a" },
	{ "Name": "b" },
	{ "Name": "c" }
]}
// the desired serialization result of a Member instance
{"GroupID":1, "Name":"a"}
]]>
				</code>
				<para>
					Adding serialization control onto the <codeInline>GroupID</codeInline> member of the <codeInline>Member</codeInline> class can hide the <codeInline>GroupID</codeInline> field, however this also hides it from the individual serialization result of the <codeInline>Member</codeInline> class, generating a result like this, which is undesirable.
				</para>
				<code language="javascript">{"Name":"a"}</code>
				<para>
					To fulfill both serialization requirements of the <codeInline>Group</codeInline> and <codeInline>Member</codeInline> classes, we shall use an alternating <codeEntityReference>T:fastJSON.SerializationManager</codeEntityReference> and pass it into the <codeEntityReference>M:fastJSON.JSON.ToJSON(System.Object,fastJSON.JSONParameters,fastJSON.SerializationManager)</codeEntityReference> method overload which takes a <codeInline>SerializationManager</codeInline> as a parameter.
				</para>
				<para>
					The alternating <codeInline>SerializationManager</codeInline> passed to the <codeEntityReference>M:fastJSON.JSON.ToJSON(System.Object,fastJSON.JSONParameters,fastJSON.SerializationManager)</codeEntityReference> method can override the <codeInline>Group</codeInline> class to hide the <codeInline>GroupID</codeInline> field, and the default one can be used to serialize the <codeInline>Member</codeInline> class, which reveals the <codeInline>GroupID</codeInline> field by default, like the following code shows.
				</para>
				<code source="..\MsUnitTest\SerializationControlTests.cs" language="c#" region="Alternated SerializationManager"/>
				<para>The above code outputs the following result, which is what we need:</para>
				<code language="js">
					<![CDATA[Group: {"ID":1,"Name":"test","Members":[{"Name":"a"},{"Name":"b"},{"Name":"c"}]}
Member: {"GroupID":1,"Name":"a"}]]>
				</code>
			</content>
		</section>
		<relatedTopics>
			<!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
		</relatedTopics>
	</developerConceptualDocument>
</topic>
